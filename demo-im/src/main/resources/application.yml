spring:
  application:
    name: hzero-im
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://db.hzero.com.cn:3306/hzero_im?useUnicode=true&characterEncoding=utf-8&useSSL=false}
    username: ${SPRING_DATASOURCE_USERNAME:hzero}
    password: ${SPRING_DATASOURCE_PASSWORD:hzero}
    hikari:
      # 连接池最小空闲连接数
      minimum-idle: ${SPRING_DATASOURCE_MINIMUM_IDLE:20}
      # 连接池允许的最大连接数
      maximum-pool-size: ${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:200}
      # 等待连接池分配连接的最大时长（毫秒）
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
  thymeleaf:
    prefix: classpath:/view/
    mode: HTML
  data:
    mongodb:
      host: ${SPRING_MONGO_HOSTS:mongo.hzero.com.cn}
      username: ${SPRING_MONGO_USERNAME:hzero}
      password: ${SPRING_MONGO_PASSWORD:hzero}
      port: ${SPRING_MONGO_PORT:27017}
      database: ${SPRING_MONGO_DATABASE:hims}
  redis:
    # Redis连接超时时间
    connect-timeout: ${SPRING_REDIS_CONNECT_TIMEOUT:2000}
    # Redis读取超时时间
    timeout: ${SPRING_REDIS_READ_TIMEOUT:5000}
    host: ${SPRING_REDIS_HOST:redis.hzero.com.cn}
    port: ${SPRING_REDIS_PORT:6379}
    database: ${SPRING_REDIS_DATABASE:8}
    lettuce:
      pool:
        # 资源池中最大连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:50}
        # 资源池运行最大空闲的连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销
        max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
        # 默认 -1 表示永不超时，设置5秒
        max-wait: ${SPRING_REDIS_POOL_MAX_WAIT:5000}
  web:
    resources:
      # 资源缓存时间，单位秒
      cache:
        period: 3600
      chain:
        # 开启压缩
        compressed: true
        # 启用缓存
        cache: true
  mvc:
    view:
      suffix: .html # 返回页面自动拼接.html后缀
server:
  servlet:
    session:
      timeout: 3600
    context-path: /hims
  undertow:
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
      # 默认值为8，建议设置每个CPU核心一个线程
      io: ${SERVER_UNDERTOW_IO_THREADS:4}
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
      # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
      worker: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)。默认false
    direct-buffers: true
    # HTTP POST请求最大的大小。默认0，无限制，可设置10M
    max-http-post-size: 10485760
feign:
  circuitbreaker:
    # 启用断路器
    enabled: ${FEIGN_CIRCUITBREAKER_ENABLED:true}
  # 请求压缩配置
  compression:
    request:
      # 配置请求GZIP压缩
      enabled: ${FEIGN_COMPRESSION_REQUEST_ENABLED:true}
      # 配置压缩数据大小的下限
      min-request-size: ${FEIGN_COMPRESSION_REQUEST_MIN_REQUEST_SIZE:2048}
  # Feign客户端配置
  client:
    config:
      # Feign客户端默认配置
      default:
        # 连接超时
        connectTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_CONNECT_TIMEOUT:2000}
        # 读取超时
        readTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_READ_TIMEOUT:5000}
        # Feign日志级别：NONE/BASIC/HEADERS/FULL
        loggerLevel: ${FEIGN_CLIENT_CONFIG_DEFAULT_LOGGER_LEVEL:FULL}
mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true
mapper:
  not-empty: true
hzero:
  lov:
    sql:
      enabled: true
    value:
      enabled: true
  data:
    permission:
      db-owner: ${HZERO_DB_OWNER:}
      # 数据权限本地缓存过期时间
      local-cache-expiration-time: ${HZERO_DATA_PERMISSION_CACHE_EXPIR_TIME:1s}
  im:
    oauth-url: ${HZERO_IM_OAUTH_URL:http://HZERO-OAUTH/oauth/api/user}
    # websocket 连接地址，支持配置ip+端口的形式,端口必须与Tio端口保持一致，该种方式解决了k8s ingress映射的域名自带端口的情况
    websocket-address: ${HZERO_IM_WEBSOCKET_ADDRESS:172.23.16.46:9876}
    open-smart-customer: ${HZERO_IM_OPEN_SMART_CUSTOMER:true} # 是否开启问题检索客服
    open-instant-messaging: ${HZERO_IM_OPEN_INSTANT_MESSAGING:true} # 是否开启即时通讯
    wechat-code: ${HZERO_IM_WECHAT_CODE:TEST} # 微信企业号模板编码
    wechat-agent: ${HZERO_IM_WECHAT_AGENT:1000003} # 微信企业号应用Id，若不加该配置则会获取微信企业号配置下的默认应用Id
  resource:
    pattern: ${HZERO_RESOURCE_PATTERN:/v1/*,/hims/v1/*}
  service:
    bucket-name: ${HZERO_IM_BUCKET_NAME:hims}
tio:
  websocket:
    server:
      # websocket port default 9876
      port: ${TIO_WEBSOCKET_PORT:9876}
      # 心跳时间
      heartbeat-timeout: ${TIO_WEBSOCKET_HEARTBEAT:60000}
      use-scanner: false
      # 集群配置 默认关闭
    cluster:
      enabled: false
      # 集群是通过redis的Pub/Sub实现，所以需要配置Redis
      redis:
        config-path: null
        ip: ${SPRING_REDIS_HOST:redis.hzero.com.cn}
        port: ${SPRING_REDIS_PORT:6379}
      all: true
      group: true
      ip: true
      user: true
    # SSL 配置
    ssl:
      enabled: false
      key-store: test
      password: test
      trust-store: test
logging:
  level:
    org.springframework.cloud: info
    io.github.resilience4j: info
    com.netflix.discovery: warn
    org.hzero.boot.platform.lov: info
    org.apache.ibatis: ${LOG_LEVEL:info}
    io.choerodon: ${LOG_LEVEL:info}
    org.hzero: ${LOG_LEVEL:info}
