spring:
  application:
    name: hzero-iam
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://db.hzero.com.cn:3306/hzero_platform?useUnicode=true&characterEncoding=utf-8&useSSL=false}
    username: ${SPRING_DATASOURCE_USERNAME:hzero}
    password: ${SPRING_DATASOURCE_PASSWORD:hzero}
    hikari:
      # 连接池最小空闲连接数
      minimum-idle: ${SPRING_DATASOURCE_MINIMUM_IDLE:30}
      # 连接池允许的最大连接数
      maximum-pool-size: ${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:200}
      # 等待连接池分配连接的最大时长（毫秒）
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
  redis:
    host: ${SPRING_REDIS_HOST:redis.hzero.com.cn}
    port: ${SPRING_REDIS_PORT:6379}
    database: ${SPRING_REDIS_DATABASE:1}
    # Redis连接超时时间
    connect-timeout: ${SPRING_REDIS_CONNECT_TIMEOUT:2000}
    # Redis读取超时时间
    timeout: ${SPRING_REDIS_READ_TIMEOUT:5000}
    lettuce:
      pool:
        # 资源池中最大连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:50}
        # 资源池运行最大空闲的连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销
        max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
        # 默认 -1 表示永不超时，设置5秒
        max-wait: ${SPRING_REDIS_POOL_MAX_WAIT:5000}
  web:
    resources:
      # 资源缓存时间，单位秒
      cache:
        period: 3600
      chain:
        # 开启gzip压缩
        compressed: true
        # 启用缓存
        cache: true
  servlet:
    multipart:
      max-file-size: 30MB
      max-request-size: 30MB
server:
  undertow:
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
      # 默认值为8，建议设置每个CPU核心一个线程
      io: ${SERVER_UNDERTOW_IO_THREADS:4}
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
      # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
      worker: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)。默认false
    direct-buffers: true
    # HTTP POST请求最大的大小。默认0，无限制，可设置10M
    max-http-post-size: 10485760
feign:
  circuitbreaker:
    # 启用断路器
    enabled: ${FEIGN_CIRCUITBREAKER_ENABLED:true}
  # 请求压缩配置
  compression:
    request:
      # 配置请求GZIP压缩
      enabled: ${FEIGN_COMPRESSION_REQUEST_ENABLED:true}
      # 配置压缩数据大小的下限
      min-request-size: ${FEIGN_COMPRESSION_REQUEST_MIN_REQUEST_SIZE:2048}
  # Feign客户端配置
  client:
    config:
      # Feign客户端默认配置
      default:
        # 连接超时
        connectTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_CONNECT_TIMEOUT:2000}
        # 读取超时
        readTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_READ_TIMEOUT:5000}
        # Feign日志级别：NONE/BASIC/HEADERS/FULL
        loggerLevel: ${FEIGN_CLIENT_CONFIG_DEFAULT_LOGGER_LEVEL:FULL}
mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true
hzero:
  lov:
    # 是否开启SQL类型LOV
    sql:
      enabled: ${HZERO_LOV_SQL_ENABLED:true}
      # 是否开启SQL值集 public api
      public-api-enabled: ${HZERO_LOV_SQL_PUBLIC_API_ENABLED:false}
  data:
    permission:
      # 是否启用数据权限屏蔽
      enabled: ${HZERO_ENABLE_DATA_PERMISSION:true}
      # 数据库所有者模式，例如 SqlServer 下的 dbo/guest
      db-owner: ${HZERO_DB_OWNER:}
      # 数据权限本地缓存过期时间
      local-cache-expiration-time: ${HZERO_DATA_PERMISSION_CACHE_EXPIR_TIME:1s}
    change:
      enable: ${HZERO_ENABLE_AUDIT:false}
  scheduler:
    executor-code: HIAM_EXECUTOR
    auto-register: true
  # 验证码配置
  captcha:
    sms:
      # 短信验证码过期时间(分)
      expire: 5
      # 验证码发送间隔时间(秒)
      interval: 60
      # 同一个账号发送次数限制
      limit-time: 10
      # 次数限制的间隔时间(时)
      limit-interval: 12
    enable: true
    # 测试时禁用验证码功能
    test-disable: ${HZERO_CAPTCHA_TEST_DISABLE:false}
  cache-value:
    # 启用 CacheValue 缓存
    enable: true
  import:
    # 初始化导入表，第一次启动服务的时候需开启此设置
    init-table: ${HZERO_IMPORT_INIT_TABLE:false}
  tenant:
    init:
      # 是否开启拦截，只有开启才会拦截租户的新增和更新
      aspect:
        enabled: ${TENANT_INIT_ASPECT:false}
  field-permission:
    # 是否启用字段权限
    enable: ${HZERO_FIELD_PERMISSION_ENABLE:true}
  iam:
    permission:
      # 是否自动刷新服务权限
      parse-permission: ${HZERO_PERMISSION_PARSE_PERMISSION:true}
      # 不需要刷新权限的服务
      skip-services: ${HZERO_PERMISSION_SKIP_PARSE_SERVICES:register,hzero-gateway,swagger}
      # 刷新权限时是否清除旧的权限
      clean-permission: ${HZERO_PERMISSION_CLEAN_PERMISSION:false}
    init-cache:
      # 是否初始化三方登陆方式到缓存
      open-login-way: ${HZERO_START_INIT_OPEN_LOGIN_WAY:true}
      # 是否初始化密码策略到缓存
      password-policy: ${HZERO_START_INIT_PASSWORD_POPLICY:true}
      # 是否初始化用户到缓存
      user: ${HZERO_START_INIT_USER:true}
      # 是否初始化缓存LDAP
      ldap: ${HZERO_START_INIT_LDAP:true}
      # 是否初始化缓存客户端
      client: ${HZERO_START_INIT_CLIENT:true}
      # 是否初始化缓存域名
      domain: ${HZERO_START_INIT_DOMAIN:true}
      # 是否初始化字段权限
      field-permission: ${HZERO_START_INIT_FIELD_PERMISSION:true}
      # 是否初始化单据权限缓存标识
      doc-auth: ${HZERO_START_INIT_DOC_AUTH:true}
    doc-tenant-type: ${HZERO_DOC_TENANT_TYPE:CUSTOM_TENANT} # 单据权限租户类型（CUSTOM_TENANT 使用当前租户，USER_TENANT 使用用户所属租户）
    # 用户账号正则
    username-regex: ${HZERO_IAM_USERNAME_REGEX:^(((?=.*[0-9])(?=.*[a-zA-Z])|(?=.*[0-9])(?=.*[_-])|(?=.*[a-zA-Z])(?=.*[_-]))[\w-]{6,30})$}
  resource:
    # 匹配的资源才会解析JwtToken便于得到UserDetails
    pattern: ${HZERO_RESOURCE_PATTERN:/v1/*,/v2/*,/hzero/*,/iam/v1/*,/iam/hzero/*}
  export:
    enable-async: true
  user:
    # 是否启用 Root 用户功能
    enable-root: ${HZERO_USER_ENABLE_ROOT:false}
    # 是否合并所有租户的角色，合并之后就不用切换租户了，一般在[单租户+平台]下才使用此配置
    merge-all-tenant-roles: ${HZERO_USER_MERGE_ALL_TENANT_ROLES:false}
    # 是否禁用平台租户级，设置为 true 后，平台租户就只能使用平台级功能，无法切换到平台租户级角色
    disable-site-tenant-level: ${HZERO_USER_DISABLE_SITE_TENANT_LEVEL:true}
    # 个人角色列表是否显示租户名称，仅在 mergeAllTenantRoles=true 时才生效.
    show-role-tenant: ${HZERO_USER_SHOW_ROLE_TENANT:false}
  audit:
    operation:
      # 全局开关，默认 false
      enable: ${HZERO_ENABLE_OP_AUDIT:false}
    data:
      # 是否启用数据变更监控功能
      enable: ${HZERO_ENABLE_DATA_AUDIT:false}
  platform:
    regist-entity:
      enable: true
  actuator:
    show-executor-info: ${HZERO_ACTUATOR_SHOW_EXECUTOR_INFO:true}
logging:
  level:
    org.springframework.cloud: debug
    io.github.resilience4j: debug
    com.netflix.discovery: error
    org.hzero.boot.platform.lov: info
    org.apache.ibatis: ${LOG_LEVEL:info}
    io.choerodon: ${LOG_LEVEL:info}
    org.hzero: ${LOG_LEVEL:info}
